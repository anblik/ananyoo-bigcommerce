{"version":3,"file":"theme-bundle.chunk.295.js","mappings":"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","sources":["webpack://bigcommerce-cornerstone/./assets/js/theme/common/gift-certificate-validator.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/utils/translations-utils.js","webpack://bigcommerce-cornerstone/./assets/js/theme/gift-certificate.js"],"sourcesContent":["export default function (cert) {\r\n    if (typeof cert !== 'string' || cert.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    // Add any custom gift certificate validation logic here\r\n    return true;\r\n}\r\n","const TRANSLATIONS = 'translations';\r\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\r\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\r\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\r\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\r\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\r\n            return dictionary;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * defines Translation Dictionary to use\r\n * @param context provides access to 3 validation JSONs from en.json:\r\n * validation_messages, validation_fallback_messages and default_messages\r\n * @returns {Object}\r\n */\r\nexport const createTranslationDictionary = (context) => {\r\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\r\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\r\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\r\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\r\n\r\n    return translationKeys.reduce((acc, key, i) => {\r\n        acc[key] = localizations[i];\r\n        return acc;\r\n    }, {});\r\n};\r\n","import PageManager from './page-manager';\r\nimport nod from './common/nod';\r\nimport checkIsGiftCertValid from './common/gift-certificate-validator';\r\nimport formModel from './common/models/forms';\r\nimport { createTranslationDictionary } from './common/utils/translations-utils';\r\nimport { announceInputErrorMessage } from './common/utils/form-utils';\r\nimport { api } from '@bigcommerce/stencil-utils';\r\nimport { defaultModal } from './global/modal';\r\n\r\nexport default class GiftCertificate extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n        this.validationDictionary = createTranslationDictionary(context);\r\n\r\n        const $certBalanceForm = $('#gift-certificate-balance');\r\n\r\n        const purchaseModel = {\r\n            recipientName(val) {\r\n                return val.length;\r\n            },\r\n            recipientEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            senderName(val) {\r\n                return val.length;\r\n            },\r\n            senderEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            customAmount(value, min, max) {\r\n                return value && value >= min && value <= max;\r\n            },\r\n            setAmount(value, options) {\r\n                let found = false;\r\n\r\n                options.forEach((option) => {\r\n                    if (option === value) {\r\n                        found = true;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return found;\r\n            },\r\n        };\r\n\r\n        const $purchaseForm = $('#gift-certificate-form');\r\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n        const purchaseValidator = nod({\r\n            submit: '#gift-certificate-form input[type=\"submit\"]',\r\n            delay: 300,\r\n            tap: announceInputErrorMessage,\r\n        });\r\n\r\n        if ($customAmounts.length) {\r\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n            const min = $element.data('min');\r\n            const minFormatted = $element.data('minFormatted');\r\n            const max = $element.data('max');\r\n            const maxFormatted = $element.data('maxFormatted');\r\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\r\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\r\n                let updatedErrorText = message;\r\n                amountPlaceholders.forEach((placeholder, i) => {\r\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\r\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\r\n                        updatedErrorText;\r\n                });\r\n                return updatedErrorText;\r\n            };\r\n\r\n            purchaseValidator.add({\r\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\r\n                validate: (cb, val) => {\r\n                    const numberVal = Number(val);\r\n\r\n                    if (!numberVal) {\r\n                        cb(false);\r\n                    }\r\n\r\n                    cb(numberVal >= min && numberVal <= max);\r\n                },\r\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\r\n            });\r\n        }\r\n\r\n        purchaseValidator.add([\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\r\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\r\n\r\n                    cb(typeof (val) === 'string');\r\n                },\r\n                errorMessage: this.context.certTheme,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n        ]);\r\n\r\n        if ($certBalanceForm.length) {\r\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\r\n\r\n            $certBalanceForm.on('submit', () => {\r\n                balanceVal.performCheck();\r\n\r\n                if (!balanceVal.areAll('valid')) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        $purchaseForm.on('submit', event => {\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return event.preventDefault();\r\n            }\r\n        });\r\n\r\n        const createFrame = (container, html) => {\r\n            const frame = $('<iframe />').width('100%').attr('frameBorder', '0').appendTo(container)[0];\r\n\r\n            // Grab the frame's document object\r\n            const frameDoc = frame.contentWindow ? frame.contentWindow.document : frame.contentDocument;\r\n\r\n            frameDoc.open();\r\n            frameDoc.write(html);\r\n            frameDoc.close();\r\n\r\n            // Calculate max height for the iframe\r\n            const maxheight = Math.max(($(window).height() - 300), 300);\r\n\r\n            // Auto adjust the iframe's height once its document is ready\r\n            $(frameDoc).ready(() => {\r\n                const height = Math.min(frameDoc.body.scrollHeight + 20, maxheight);\r\n                $(frame).height(height);\r\n            });\r\n        };\r\n\r\n        $('#gift-certificate-preview').click(event => {\r\n            event.preventDefault();\r\n\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            const modal = defaultModal();\r\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\r\n\r\n            modal.open();\r\n\r\n            api.getPage(previewUrl, {}, (err, content) => {\r\n                if (err) {\r\n                    return modal.updateContent(this.context.previewError);\r\n                }\r\n\r\n                modal.updateContent();\r\n\r\n                const container = $('#modal-content');\r\n                createFrame(container, content);\r\n            });\r\n        });\r\n    }\r\n\r\n    checkCertBalanceValidator($balanceForm) {\r\n        const balanceValidator = nod({\r\n            submit: $balanceForm.find('input[type=\"submit\"]'),\r\n            tap: announceInputErrorMessage,\r\n        });\r\n\r\n        balanceValidator.add({\r\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\r\n            validate(cb, val) {\r\n                cb(checkIsGiftCertValid(val));\r\n            },\r\n            errorMessage: this.validationDictionary.invalid_gift_certificate,\r\n        });\r\n\r\n        return balanceValidator;\r\n    }\r\n}\r\n"],"names":["cert","length","TRANSLATIONS","isTranslationDictionaryNotEmpty","dictionary","Object","keys","createTranslationDictionary","context","activeDictionary","i","arguments","JSON","parse","undefined","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","split","pop","reduce","acc","GiftCertificate","_PageManager","_this","call","validationDictionary","$certBalanceForm","$","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","tap","announceInputErrorMessage","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","val","numberVal","Number","errorMessage","message","_len","amountRange","Array","_key","updatedErrorText","forEach","placeholder","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","purchaseModel","toName","formModel","email","apply","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","container","html","frame","width","attr","appendTo","frameDoc","contentWindow","document","contentDocument","write","close","maxheight","Math","window","height","ready","body","scrollHeight","createFrame","prototype","$balanceForm","balanceValidator","checkIsGiftCertValid","this","invalid_gift_certificate","PageManager"],"sourceRoot":""}